group 'grpc-client'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.1.1'
    ext.springboot_version = "2.0.0.BUILD-SNAPSHOT"

    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springboot_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.1"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.google.protobuf'

mainClassName = "app.Application"

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources

kapt {
    generateStubs = false
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
    main.java.srcDirs += 'src/main/protoGen'
}

jar {
    manifest { attributes "Main-Class" : "app.Application" }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

repositories {
    mavenCentral()
    jcenter()

    maven { url "http://repo.spring.io/snapshot/" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "http://maven.springframework.org/milestone" }
}

def grpcVersion = '1.2.0'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // grpc
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-okhttp:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "com.google.api.grpc:googleapis-common-protos:0.0.3"

    // spring-boot
    compile ("org.springframework.boot:spring-boot-starter-webflux") {
        exclude module: "hibernate-validator"
    }

    compile "io.projectreactor:reactor-kotlin-extensions:1.0.0.M1"
    testCompile "io.projectreactor.addons:reactor-test"

    // test
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.2.0'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        ofSourceSet('main').each { task ->
            task.builtins {
                java {
                    outputSubDir = 'protoGen'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'protoGen'
                }
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/"
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/kotlin")
        sourceDirs += file("${projectDir}/src/java")
        sourceDirs += file("${projectDir}/src/protoGen")

        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

startScripts.enabled = false

task cleanProtoGen {
    doFirst{
        delete("$projectDir/src/main/protoGen")
    }
}
clean.dependsOn cleanProtoGen
